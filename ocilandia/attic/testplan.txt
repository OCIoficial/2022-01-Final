# This is a sample testplan. Each line specifies a command to generate a single test case.
# When executing the testplan, ocimatic will take care of choosing a name for the file
# and placing it in the correct directory.

# The first column in each line is the "group name". This is supposed to briefly describe how the
# test was generated or what is suppose to be testing. The group name will be used as part of the
# name of the generated test file. This is useful when debugging solutions to be able to see at a
# glance in which test cases the solution is failing. It should also inform a reader of the
# testplan the purpose of each test.

# The second column specifies a command to generate the test case. A command could be either `copy`
# `echo` or a generator script.

# `copy`: The copy command takes a single argument: a path to a file to copy. The path should be
# relative to the root of the current task.

# `echo`: This command takes one or more arguments and prints them in a single line. This is useful
# for tasks where the input consist of a single line to quickly generate test cases manually.

# `script`: A generator script is a file in either python (extension `.py`) or c++ (extension `.cpp`).
# The file should be placed in `attic/` next to this file. When processing the testplan ocimatic will
# run the script with the provided arguments (sys.argv or **argv). The script should then write
# to the standard output.
# Generator scripts typically use randomness. To ensure each execution of the testplan generates the
# same results a script should set the random seed to a fixed value. To this end, ocimatic passes an
# additional (hidden) argument to each invocation which is guaranteed to be different each time.
# The generator should use this extra argument to generate the random seed. The extra argument is
# passed as the first argument meaning that the rest of the arguments are "shifted" in one position.

[Subtask 1 - validators/st1.cpp]
  # Use sample data as test
  sample ; copy statement/sample-1.in

  # Random tests      N min_fila max_fila min_t max_t
  rand ; generate.py  2   1       10        1     10
  rand ; generate.py  3   1       10        1     10
  rand ; generate.py  5   1       10        1     10
  rand ; generate.py  10   2       100        1     100
  rand ; generate.py  10   50     100      1     100
  rand ; generate.py  10   50     100      1     100
  rand ; generate.py  20   2     100      1     100
  rand ; generate.py  30   2     100      1     100
  rand ; generate.py  40   2     100      1     100
  rand ; generate.py  50   2     100      1     100
  rand ; generate.py  60   2     100      1     100
  rand ; generate.py  70   2     100      1     100
  rand ; generate.py  80   2     100      1     100
  rand ; generate.py  90   2     100      1     100
  rand ; generate.py  100  21     1000      1     100

  # Same tests but with slightly different params for rand
  rand ; generate.py  2   5       10        1     10
  rand ; generate.py  3   5       10        1     10
  rand ; generate.py  5   5       10        1     10
  rand ; generate.py  10   1       100        1     100
  rand ; generate.py  10   100     1000      100     1000
  rand ; generate.py  10   100     1000      100     1000
  rand ; generate.py  20   1     1000      1     1000
  rand ; generate.py  30   1     1000      1     1000
  rand ; generate.py  40   1     1000      1     1000
  rand ; generate.py  50   1     1000      1     1000
  rand ; generate.py  60   1     1000      1     1000
  rand ; generate.py  70   1     1000      1     1000
  rand ; generate.py  80   1     1000      1     1000
  rand ; generate.py  90   1     1000      1     1000
  rand ; generate.py  100   1     1000      1     1000

